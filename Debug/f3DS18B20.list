
f3DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000248c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002644  08002644  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002644  08002644  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002644  08002644  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002644  08002644  00012644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800264c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000003c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006761  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001398  00000000  00000000  000267a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004b0  00000000  00000000  00027b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000408  00000000  00000000  00027ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c262  00000000  00000000  000283f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006a7c  00000000  00000000  0004465a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a96d9  00000000  00000000  0004b0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f47af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001068  00000000  00000000  000f4800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080025fc 	.word	0x080025fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080025fc 	.word	0x080025fc

080001c8 <DWT_Delay_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
uint32_t DWT_Delay_Init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80001cc:	4b14      	ldr	r3, [pc, #80]	; (8000220 <DWT_Delay_Init+0x58>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	4a13      	ldr	r2, [pc, #76]	; (8000220 <DWT_Delay_Init+0x58>)
 80001d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80001d6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80001d8:	4b11      	ldr	r3, [pc, #68]	; (8000220 <DWT_Delay_Init+0x58>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	4a10      	ldr	r2, [pc, #64]	; (8000220 <DWT_Delay_Init+0x58>)
 80001de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001e2:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <DWT_Delay_Init+0x5c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <DWT_Delay_Init+0x5c>)
 80001ea:	f023 0301 	bic.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80001f0:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <DWT_Delay_Init+0x5c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0b      	ldr	r2, [pc, #44]	; (8000224 <DWT_Delay_Init+0x5c>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80001fc:	4b09      	ldr	r3, [pc, #36]	; (8000224 <DWT_Delay_Init+0x5c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000202:	bf00      	nop
    __ASM volatile ("NOP");
 8000204:	bf00      	nop
    __ASM volatile ("NOP");
 8000206:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <DWT_Delay_Init+0x5c>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000210:	2300      	movs	r3, #0
 8000212:	e000      	b.n	8000216 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000214:	2301      	movs	r3, #1
    }
}
 8000216:	4618      	mov	r0, r3
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	e000edf0 	.word	0xe000edf0
 8000224:	e0001000 	.word	0xe0001000

08000228 <DWT_Delay_us>:

 void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <DWT_Delay_us+0x48>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000236:	f001 fff9 	bl	800222c <HAL_RCC_GetHCLKFreq>
 800023a:	4603      	mov	r3, r0
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <DWT_Delay_us+0x4c>)
 800023e:	fba2 2303 	umull	r2, r3, r2, r3
 8000242:	0c9b      	lsrs	r3, r3, #18
 8000244:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	68ba      	ldr	r2, [r7, #8]
 800024a:	fb02 f303 	mul.w	r3, r2, r3
 800024e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000250:	bf00      	nop
 8000252:	4b07      	ldr	r3, [pc, #28]	; (8000270 <DWT_Delay_us+0x48>)
 8000254:	685a      	ldr	r2, [r3, #4]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	1ad2      	subs	r2, r2, r3
 800025a:	6879      	ldr	r1, [r7, #4]
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	1acb      	subs	r3, r1, r3
 8000260:	429a      	cmp	r2, r3
 8000262:	d3f6      	bcc.n	8000252 <DWT_Delay_us+0x2a>
}
 8000264:	bf00      	nop
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	e0001000 	.word	0xe0001000
 8000274:	431bde83 	.word	0x431bde83

08000278 <gpio_set_input>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
GPIO_InitTypeDef GPIO_InitStruct;

void gpio_set_input (void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <gpio_set_input+0x24>)
 800027e:	2202      	movs	r2, #2
 8000280:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <gpio_set_input+0x24>)
 8000284:	2200      	movs	r2, #0
 8000286:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <gpio_set_input+0x24>)
 800028a:	2201      	movs	r2, #1
 800028c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800028e:	4903      	ldr	r1, [pc, #12]	; (800029c <gpio_set_input+0x24>)
 8000290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000294:	f000 fbfc 	bl	8000a90 <HAL_GPIO_Init>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	2000002c 	.word	0x2000002c

080002a0 <gpio_set_output>:


void gpio_set_output (void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <gpio_set_output+0x2c>)
 80002a6:	2202      	movs	r2, #2
 80002a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <gpio_set_output+0x2c>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <gpio_set_output+0x2c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <gpio_set_output+0x2c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002bc:	4903      	ldr	r1, [pc, #12]	; (80002cc <gpio_set_output+0x2c>)
 80002be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c2:	f000 fbe5 	bl	8000a90 <HAL_GPIO_Init>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000002c 	.word	0x2000002c

080002d0 <ds18b20_init>:
uint16_t temp;
float temperature;


uint8_t ds18b20_init (void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	gpio_set_output ();   // set the pin as output
 80002d4:	f7ff ffe4 	bl	80002a0 <gpio_set_output>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin low
 80002d8:	2200      	movs	r2, #0
 80002da:	2102      	movs	r1, #2
 80002dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e0:	f000 fd68 	bl	8000db4 <HAL_GPIO_WritePin>
	DWT_Delay_us(480);   // delay according to datasheet
 80002e4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80002e8:	f7ff ff9e 	bl	8000228 <DWT_Delay_us>

	gpio_set_input ();    // set the pin as input
 80002ec:	f7ff ffc4 	bl	8000278 <gpio_set_input>
	DWT_Delay_us (80);    // delay according to datasheet
 80002f0:	2050      	movs	r0, #80	; 0x50
 80002f2:	f7ff ff99 	bl	8000228 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)))    // if the pin is low i.e the presence pulse is there
 80002f6:	2102      	movs	r1, #2
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fc:	f000 fd42 	bl	8000d84 <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d105      	bne.n	8000312 <ds18b20_init+0x42>
	{
		DWT_Delay_us(400);  // wait for 400 us
 8000306:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800030a:	f7ff ff8d 	bl	8000228 <DWT_Delay_us>
		return 0;
 800030e:	2300      	movs	r3, #0
 8000310:	e004      	b.n	800031c <ds18b20_init+0x4c>
	}

	else
	{
		DWT_Delay_us(400);
 8000312:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000316:	f7ff ff87 	bl	8000228 <DWT_Delay_us>
		return 1;
 800031a:	2301      	movs	r3, #1
	}
}
 800031c:	4618      	mov	r0, r3
 800031e:	bd80      	pop	{r7, pc}

08000320 <write>:

void write (uint8_t data)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
	gpio_set_output ();   // set as output
 800032a:	f7ff ffb9 	bl	80002a0 <gpio_set_output>

	for (int i=0; i<8; i++)
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e028      	b.n	8000386 <write+0x66>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8000334:	79fa      	ldrb	r2, [r7, #7]
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	fa42 f303 	asr.w	r3, r2, r3
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	2b00      	cmp	r3, #0
 8000342:	d010      	beq.n	8000366 <write+0x46>
		{
			// write 1

			gpio_set_output ();  // set as output
 8000344:	f7ff ffac 	bl	80002a0 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin LOW
 8000348:	2200      	movs	r2, #0
 800034a:	2102      	movs	r1, #2
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f000 fd30 	bl	8000db4 <HAL_GPIO_WritePin>
			DWT_Delay_us (1);  // wait for  us
 8000354:	2001      	movs	r0, #1
 8000356:	f7ff ff67 	bl	8000228 <DWT_Delay_us>

			gpio_set_input ();  // set as input
 800035a:	f7ff ff8d 	bl	8000278 <gpio_set_input>
			DWT_Delay_us (60);  // wait for 60 us
 800035e:	203c      	movs	r0, #60	; 0x3c
 8000360:	f7ff ff62 	bl	8000228 <DWT_Delay_us>
 8000364:	e00c      	b.n	8000380 <write+0x60>

		else  // if the bit is low
		{
			// write 0

			gpio_set_output ();
 8000366:	f7ff ff9b 	bl	80002a0 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin LOW
 800036a:	2200      	movs	r2, #0
 800036c:	2102      	movs	r1, #2
 800036e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000372:	f000 fd1f 	bl	8000db4 <HAL_GPIO_WritePin>
			DWT_Delay_us (60);  // wait for 60 us
 8000376:	203c      	movs	r0, #60	; 0x3c
 8000378:	f7ff ff56 	bl	8000228 <DWT_Delay_us>

			gpio_set_input ();
 800037c:	f7ff ff7c 	bl	8000278 <gpio_set_input>
	for (int i=0; i<8; i++)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	3301      	adds	r3, #1
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	2b07      	cmp	r3, #7
 800038a:	ddd3      	ble.n	8000334 <write+0x14>
		}
	}
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <read>:


uint8_t read (void)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b082      	sub	sp, #8
 800039a:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800039c:	2300      	movs	r3, #0
 800039e:	71fb      	strb	r3, [r7, #7]
	gpio_set_input ();
 80003a0:	f7ff ff6a 	bl	8000278 <gpio_set_input>

	for (int i=0;i<8;i++)
 80003a4:	2300      	movs	r3, #0
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	e024      	b.n	80003f4 <read+0x5e>
	{
		gpio_set_output ();   // set as output
 80003aa:	f7ff ff79 	bl	80002a0 <gpio_set_output>

		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the data pin LOW
 80003ae:	2200      	movs	r2, #0
 80003b0:	2102      	movs	r1, #2
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b6:	f000 fcfd 	bl	8000db4 <HAL_GPIO_WritePin>
		DWT_Delay_us (2);  // wait for 2 us
 80003ba:	2002      	movs	r0, #2
 80003bc:	f7ff ff34 	bl	8000228 <DWT_Delay_us>

		gpio_set_input ();  // set as input
 80003c0:	f7ff ff5a 	bl	8000278 <gpio_set_input>
		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))  // if the pin is HIGH
 80003c4:	2102      	movs	r1, #2
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ca:	f000 fcdb 	bl	8000d84 <HAL_GPIO_ReadPin>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d009      	beq.n	80003e8 <read+0x52>
		{
			value |= 1<<i;  // read = 1
 80003d4:	2201      	movs	r2, #1
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	fa02 f303 	lsl.w	r3, r2, r3
 80003dc:	b25a      	sxtb	r2, r3
 80003de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	b25b      	sxtb	r3, r3
 80003e6:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (60);  // wait for 60 us
 80003e8:	203c      	movs	r0, #60	; 0x3c
 80003ea:	f7ff ff1d 	bl	8000228 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	2b07      	cmp	r3, #7
 80003f8:	ddd7      	ble.n	80003aa <read+0x14>
	}
	return value;
 80003fa:	79fb      	ldrb	r3, [r7, #7]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000408:	f000 f9d2 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040c:	f000 f84c 	bl	80004a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000410:	f000 f8aa 	bl	8000568 <MX_GPIO_Init>
//  MX_I2C1_Init();
//  MX_SPI1_Init();
//  MX_USB_PCD_Init();
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000414:	f7ff fed8 	bl	80001c8 <DWT_Delay_Init>


  while (1)
  {
    /* USER CODE END WHILE */
	  check = ds18b20_init ();
 8000418:	f7ff ff5a 	bl	80002d0 <ds18b20_init>
 800041c:	4603      	mov	r3, r0
 800041e:	461a      	mov	r2, r3
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <main+0x90>)
 8000422:	701a      	strb	r2, [r3, #0]
	  		write (0xCC);  // skip ROM
 8000424:	20cc      	movs	r0, #204	; 0xcc
 8000426:	f7ff ff7b 	bl	8000320 <write>
	  		write (0x44);  // convert t
 800042a:	2044      	movs	r0, #68	; 0x44
 800042c:	f7ff ff78 	bl	8000320 <write>

	  		HAL_Delay (800);
 8000430:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000434:	f000 fa22 	bl	800087c <HAL_Delay>

	  		ds18b20_init ();
 8000438:	f7ff ff4a 	bl	80002d0 <ds18b20_init>
	  		write (0xCC);  // skip ROM
 800043c:	20cc      	movs	r0, #204	; 0xcc
 800043e:	f7ff ff6f 	bl	8000320 <write>
	  		write (0xBE);  // Read Scratchpad
 8000442:	20be      	movs	r0, #190	; 0xbe
 8000444:	f7ff ff6c 	bl	8000320 <write>

	  		temp_l = read();
 8000448:	f7ff ffa5 	bl	8000396 <read>
 800044c:	4603      	mov	r3, r0
 800044e:	461a      	mov	r2, r3
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <main+0x94>)
 8000452:	701a      	strb	r2, [r3, #0]
	  		temp_h = read();
 8000454:	f7ff ff9f 	bl	8000396 <read>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <main+0x98>)
 800045e:	701a      	strb	r2, [r3, #0]
	  		temp = (temp_h<<8)|temp_l;
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <main+0x98>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	021b      	lsls	r3, r3, #8
 8000466:	b21a      	sxth	r2, r3
 8000468:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <main+0x94>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	b21b      	sxth	r3, r3
 800046e:	4313      	orrs	r3, r2
 8000470:	b21b      	sxth	r3, r3
 8000472:	b29a      	uxth	r2, r3
 8000474:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <main+0x9c>)
 8000476:	801a      	strh	r2, [r3, #0]
	  		temperature = (float)temp/16;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <main+0x9c>)
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	ee07 3a90 	vmov	s15, r3
 8000480:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000484:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000488:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <main+0xa0>)
 800048e:	edc3 7a00 	vstr	s15, [r3]
	  check = ds18b20_init ();
 8000492:	e7c1      	b.n	8000418 <main+0x14>
 8000494:	20000000 	.word	0x20000000
 8000498:	20000040 	.word	0x20000040
 800049c:	20000041 	.word	0x20000041
 80004a0:	20000042 	.word	0x20000042
 80004a4:	20000044 	.word	0x20000044

080004a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b09e      	sub	sp, #120	; 0x78
 80004ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004b2:	2228      	movs	r2, #40	; 0x28
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f002 f898 	bl	80025ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004cc:	463b      	mov	r3, r7
 80004ce:	223c      	movs	r2, #60	; 0x3c
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 f88a 	bl	80025ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004d8:	2303      	movs	r3, #3
 80004da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e6:	2301      	movs	r3, #1
 80004e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ea:	2310      	movs	r3, #16
 80004ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ee:	2302      	movs	r3, #2
 80004f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004fc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fc6e 	bl	8000de4 <HAL_RCC_OscConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800050e:	f000 f8bf 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000512:	230f      	movs	r3, #15
 8000514:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000516:	2302      	movs	r3, #2
 8000518:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800051e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000528:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800052c:	2102      	movs	r1, #2
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fc96 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800053a:	f000 f8a9 	bl	8000690 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <SystemClock_Config+0xbc>)
 8000540:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000546:	2300      	movs	r3, #0
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054a:	463b      	mov	r3, r7
 800054c:	4618      	mov	r0, r3
 800054e:	f001 fe79 	bl	8002244 <HAL_RCCEx_PeriphCLKConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000558:	f000 f89a 	bl	8000690 <Error_Handler>
  }
}
 800055c:	bf00      	nop
 800055e:	3778      	adds	r7, #120	; 0x78
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	00020020 	.word	0x00020020

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800057e:	4b42      	ldr	r3, [pc, #264]	; (8000688 <MX_GPIO_Init+0x120>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a41      	ldr	r2, [pc, #260]	; (8000688 <MX_GPIO_Init+0x120>)
 8000584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <MX_GPIO_Init+0x120>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	4b3c      	ldr	r3, [pc, #240]	; (8000688 <MX_GPIO_Init+0x120>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a3b      	ldr	r2, [pc, #236]	; (8000688 <MX_GPIO_Init+0x120>)
 800059c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b39      	ldr	r3, [pc, #228]	; (8000688 <MX_GPIO_Init+0x120>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ae:	4b36      	ldr	r3, [pc, #216]	; (8000688 <MX_GPIO_Init+0x120>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a35      	ldr	r2, [pc, #212]	; (8000688 <MX_GPIO_Init+0x120>)
 80005b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b33      	ldr	r3, [pc, #204]	; (8000688 <MX_GPIO_Init+0x120>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b30      	ldr	r3, [pc, #192]	; (8000688 <MX_GPIO_Init+0x120>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a2f      	ldr	r2, [pc, #188]	; (8000688 <MX_GPIO_Init+0x120>)
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <MX_GPIO_Init+0x120>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <MX_GPIO_Init+0x120>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a29      	ldr	r2, [pc, #164]	; (8000688 <MX_GPIO_Init+0x120>)
 80005e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b27      	ldr	r3, [pc, #156]	; (8000688 <MX_GPIO_Init+0x120>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005f6:	2200      	movs	r2, #0
 80005f8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80005fc:	4823      	ldr	r0, [pc, #140]	; (800068c <MX_GPIO_Init+0x124>)
 80005fe:	f000 fbd9 	bl	8000db4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2102      	movs	r1, #2
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f000 fbd3 	bl	8000db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800060e:	2337      	movs	r3, #55	; 0x37
 8000610:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000612:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	481a      	ldr	r0, [pc, #104]	; (800068c <MX_GPIO_Init+0x124>)
 8000624:	f000 fa34 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000628:	f64f 7308 	movw	r3, #65288	; 0xff08
 800062c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4812      	ldr	r0, [pc, #72]	; (800068c <MX_GPIO_Init+0x124>)
 8000642:	f000 fa25 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000646:	2301      	movs	r3, #1
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f000 fa18 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f000 fa09 	bl	8000a90 <HAL_GPIO_Init>

}
 800067e:	bf00      	nop
 8000680:	3728      	adds	r7, #40	; 0x28
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	48001000 	.word	0x48001000

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_MspInit+0x44>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <HAL_MspInit+0x44>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_MspInit+0x44>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x44>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_MspInit+0x44>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_MspInit+0x44>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006d2:	2007      	movs	r0, #7
 80006d4:	f000 f9a8 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f884 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <SystemInit+0x20>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <SystemInit+0x20>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800075c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000794 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000762:	490e      	ldr	r1, [pc, #56]	; (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000764:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <LoopForever+0xe>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000778:	4c0b      	ldr	r4, [pc, #44]	; (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000786:	f7ff ffd7 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078a:	f001 ff0b 	bl	80025a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800078e:	f7ff fe39 	bl	8000404 <main>

08000792 <LoopForever>:

LoopForever:
    b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000794:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007a0:	0800264c 	.word	0x0800264c
  ldr r2, =_sbss
 80007a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007a8:	2000004c 	.word	0x2000004c

080007ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_2_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_Init+0x28>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_Init+0x28>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 f931 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 f808 	bl	80007dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007cc:	f7ff ff66 	bl	800069c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_InitTick+0x54>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x58>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f93b 	bl	8000a76 <HAL_SYSTICK_Config>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e00e      	b.n	8000828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d80a      	bhi.n	8000826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000810:	2200      	movs	r2, #0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f000 f911 	bl	8000a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <HAL_InitTick+0x5c>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
 8000824:	e000      	b.n	8000828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000004 	.word	0x20000004
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20000008 	.word	0x20000008

0800083c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_IncTick+0x20>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_IncTick+0x24>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_IncTick+0x24>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2000000c 	.word	0x2000000c
 8000860:	20000048 	.word	0x20000048

08000864 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;  
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <HAL_GetTick+0x14>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000048 	.word	0x20000048

0800087c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000884:	f7ff ffee 	bl	8000864 <HAL_GetTick>
 8000888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000894:	d005      	beq.n	80008a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_Delay+0x44>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4413      	add	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008a2:	bf00      	nop
 80008a4:	f7ff ffde 	bl	8000864 <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d8f7      	bhi.n	80008a4 <HAL_Delay+0x28>
  {
  }
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000000c 	.word	0x2000000c

080008c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <__NVIC_GetPriorityGrouping+0x18>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	f003 0307 	and.w	r3, r3, #7
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	; (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	; (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	; 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f1c3 0307 	rsb	r3, r3, #7
 8000996:	2b04      	cmp	r3, #4
 8000998:	bf28      	it	cs
 800099a:	2304      	movcs	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3304      	adds	r3, #4
 80009a2:	2b06      	cmp	r3, #6
 80009a4:	d902      	bls.n	80009ac <NVIC_EncodePriority+0x30>
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3b03      	subs	r3, #3
 80009aa:	e000      	b.n	80009ae <NVIC_EncodePriority+0x32>
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	401a      	ands	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43d9      	mvns	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	4313      	orrs	r3, r2
         );
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	; 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f4:	d301      	bcc.n	80009fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00f      	b.n	8000a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <SysTick_Config+0x40>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a02:	210f      	movs	r1, #15
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f7ff ff8e 	bl	8000928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SysTick_Config+0x40>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <SysTick_Config+0x40>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff47 	bl	80008c4 <__NVIC_SetPriorityGrouping>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff5c 	bl	800090c <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff8e 	bl	800097c <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5d 	bl	8000928 <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffb0 	bl	80009e4 <SysTick_Config>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9e:	e154      	b.n	8000d4a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 8146 	beq.w	8000d44 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d005      	beq.n	8000ad0 <HAL_GPIO_Init+0x40>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d130      	bne.n	8000b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	2203      	movs	r2, #3
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b06:	2201      	movs	r2, #1
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	091b      	lsrs	r3, r3, #4
 8000b1c:	f003 0201 	and.w	r2, r3, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d017      	beq.n	8000b6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2203      	movs	r2, #3
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d123      	bne.n	8000bc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	08da      	lsrs	r2, r3, #3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3208      	adds	r2, #8
 8000b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	220f      	movs	r2, #15
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	691a      	ldr	r2, [r3, #16]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	08da      	lsrs	r2, r3, #3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3208      	adds	r2, #8
 8000bbc:	6939      	ldr	r1, [r7, #16]
 8000bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2203      	movs	r2, #3
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0203 	and.w	r2, r3, #3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 80a0 	beq.w	8000d44 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c04:	4b58      	ldr	r3, [pc, #352]	; (8000d68 <HAL_GPIO_Init+0x2d8>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a57      	ldr	r2, [pc, #348]	; (8000d68 <HAL_GPIO_Init+0x2d8>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b55      	ldr	r3, [pc, #340]	; (8000d68 <HAL_GPIO_Init+0x2d8>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c1c:	4a53      	ldr	r2, [pc, #332]	; (8000d6c <HAL_GPIO_Init+0x2dc>)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	220f      	movs	r2, #15
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c46:	d019      	beq.n	8000c7c <HAL_GPIO_Init+0x1ec>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a49      	ldr	r2, [pc, #292]	; (8000d70 <HAL_GPIO_Init+0x2e0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d013      	beq.n	8000c78 <HAL_GPIO_Init+0x1e8>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a48      	ldr	r2, [pc, #288]	; (8000d74 <HAL_GPIO_Init+0x2e4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d00d      	beq.n	8000c74 <HAL_GPIO_Init+0x1e4>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a47      	ldr	r2, [pc, #284]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d007      	beq.n	8000c70 <HAL_GPIO_Init+0x1e0>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a46      	ldr	r2, [pc, #280]	; (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d101      	bne.n	8000c6c <HAL_GPIO_Init+0x1dc>
 8000c68:	2304      	movs	r3, #4
 8000c6a:	e008      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	e006      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c70:	2303      	movs	r3, #3
 8000c72:	e004      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c74:	2302      	movs	r3, #2
 8000c76:	e002      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e000      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	f002 0203 	and.w	r2, r2, #3
 8000c84:	0092      	lsls	r2, r2, #2
 8000c86:	4093      	lsls	r3, r2
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c8e:	4937      	ldr	r1, [pc, #220]	; (8000d6c <HAL_GPIO_Init+0x2dc>)
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	089b      	lsrs	r3, r3, #2
 8000c94:	3302      	adds	r3, #2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c9c:	4b38      	ldr	r3, [pc, #224]	; (8000d80 <HAL_GPIO_Init+0x2f0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cc0:	4a2f      	ldr	r2, [pc, #188]	; (8000d80 <HAL_GPIO_Init+0x2f0>)
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <HAL_GPIO_Init+0x2f0>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cea:	4a25      	ldr	r2, [pc, #148]	; (8000d80 <HAL_GPIO_Init+0x2f0>)
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <HAL_GPIO_Init+0x2f0>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d14:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <HAL_GPIO_Init+0x2f0>)
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_GPIO_Init+0x2f0>)
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_GPIO_Init+0x2f0>)
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3301      	adds	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa22 f303 	lsr.w	r3, r2, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f47f aea3 	bne.w	8000aa0 <HAL_GPIO_Init+0x10>
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	371c      	adds	r7, #28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010000 	.word	0x40010000
 8000d70:	48000400 	.word	0x48000400
 8000d74:	48000800 	.word	0x48000800
 8000d78:	48000c00 	.word	0x48000c00
 8000d7c:	48001000 	.word	0x48001000
 8000d80:	40010400 	.word	0x40010400

08000d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	4013      	ands	r3, r2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e001      	b.n	8000da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dc4:	787b      	ldrb	r3, [r7, #1]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dd2:	887a      	ldrh	r2, [r7, #2]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	f001 b823 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 817d 	beq.w	800111a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e20:	4bbc      	ldr	r3, [pc, #752]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 030c 	and.w	r3, r3, #12
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d00c      	beq.n	8000e46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e2c:	4bb9      	ldr	r3, [pc, #740]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d15c      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x10e>
 8000e38:	4bb6      	ldr	r3, [pc, #728]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e44:	d155      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x10e>
 8000e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e52:	fa93 f3a3 	rbit	r3, r3
 8000e56:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5e:	fab3 f383 	clz	r3, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	095b      	lsrs	r3, r3, #5
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d102      	bne.n	8000e78 <HAL_RCC_OscConfig+0x94>
 8000e72:	4ba8      	ldr	r3, [pc, #672]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	e015      	b.n	8000ea4 <HAL_RCC_OscConfig+0xc0>
 8000e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e84:	fa93 f3a3 	rbit	r3, r3
 8000e88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e98:	fa93 f3a3 	rbit	r3, r3
 8000e9c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ea0:	4b9c      	ldr	r3, [pc, #624]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ea8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000eac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000eb0:	fa92 f2a2 	rbit	r2, r2
 8000eb4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000eb8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ebc:	fab2 f282 	clz	r2, r2
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	f042 0220 	orr.w	r2, r2, #32
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	f002 021f 	and.w	r2, r2, #31
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 811f 	beq.w	8001118 <HAL_RCC_OscConfig+0x334>
 8000eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 8116 	bne.w	8001118 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f000 bfaf 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f02:	d106      	bne.n	8000f12 <HAL_RCC_OscConfig+0x12e>
 8000f04:	4b83      	ldr	r3, [pc, #524]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a82      	ldr	r2, [pc, #520]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	e036      	b.n	8000f80 <HAL_RCC_OscConfig+0x19c>
 8000f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x158>
 8000f22:	4b7c      	ldr	r3, [pc, #496]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a7b      	ldr	r2, [pc, #492]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b79      	ldr	r3, [pc, #484]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a78      	ldr	r2, [pc, #480]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e021      	b.n	8000f80 <HAL_RCC_OscConfig+0x19c>
 8000f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f4c:	d10c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x184>
 8000f4e:	4b71      	ldr	r3, [pc, #452]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a70      	ldr	r2, [pc, #448]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b6e      	ldr	r3, [pc, #440]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a6d      	ldr	r2, [pc, #436]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e00b      	b.n	8000f80 <HAL_RCC_OscConfig+0x19c>
 8000f68:	4b6a      	ldr	r3, [pc, #424]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a69      	ldr	r2, [pc, #420]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b67      	ldr	r3, [pc, #412]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a66      	ldr	r2, [pc, #408]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f80:	4b64      	ldr	r3, [pc, #400]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	f023 020f 	bic.w	r2, r3, #15
 8000f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	495f      	ldr	r1, [pc, #380]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d059      	beq.n	800105e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000faa:	f7ff fc5b 	bl	8000864 <HAL_GetTick>
 8000fae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	e00a      	b.n	8000fca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fc56 	bl	8000864 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b64      	cmp	r3, #100	; 0x64
 8000fc2:	d902      	bls.n	8000fca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	f000 bf43 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 8000fca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	fab3 f383 	clz	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	095b      	lsrs	r3, r3, #5
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d102      	bne.n	8000ffc <HAL_RCC_OscConfig+0x218>
 8000ff6:	4b47      	ldr	r3, [pc, #284]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	e015      	b.n	8001028 <HAL_RCC_OscConfig+0x244>
 8000ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001000:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001014:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001018:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800101c:	fa93 f3a3 	rbit	r3, r3
 8001020:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001024:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800102c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001030:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001034:	fa92 f2a2 	rbit	r2, r2
 8001038:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800103c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001040:	fab2 f282 	clz	r2, r2
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	f042 0220 	orr.w	r2, r2, #32
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	f002 021f 	and.w	r2, r2, #31
 8001050:	2101      	movs	r1, #1
 8001052:	fa01 f202 	lsl.w	r2, r1, r2
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0ab      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x1d0>
 800105c:	e05d      	b.n	800111a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105e:	f7ff fc01 	bl	8000864 <HAL_GetTick>
 8001062:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001066:	e00a      	b.n	800107e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff fbfc 	bl	8000864 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b64      	cmp	r3, #100	; 0x64
 8001076:	d902      	bls.n	800107e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	f000 bee9 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 800107e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001082:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800108a:	fa93 f3a3 	rbit	r3, r3
 800108e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001092:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	095b      	lsrs	r3, r3, #5
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d102      	bne.n	80010b0 <HAL_RCC_OscConfig+0x2cc>
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	e015      	b.n	80010dc <HAL_RCC_OscConfig+0x2f8>
 80010b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010e8:	fa92 f2a2 	rbit	r2, r2
 80010ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010f4:	fab2 f282 	clz	r2, r2
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	f042 0220 	orr.w	r2, r2, #32
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	f002 021f 	and.w	r2, r2, #31
 8001104:	2101      	movs	r1, #1
 8001106:	fa01 f202 	lsl.w	r2, r1, r2
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ab      	bne.n	8001068 <HAL_RCC_OscConfig+0x284>
 8001110:	e003      	b.n	800111a <HAL_RCC_OscConfig+0x336>
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800111e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 817d 	beq.w	800142a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001130:	4ba6      	ldr	r3, [pc, #664]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800113c:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b08      	cmp	r3, #8
 8001146:	d172      	bne.n	800122e <HAL_RCC_OscConfig+0x44a>
 8001148:	4ba0      	ldr	r3, [pc, #640]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d16c      	bne.n	800122e <HAL_RCC_OscConfig+0x44a>
 8001154:	2302      	movs	r3, #2
 8001156:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001166:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	fab3 f383 	clz	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	095b      	lsrs	r3, r3, #5
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d102      	bne.n	8001184 <HAL_RCC_OscConfig+0x3a0>
 800117e:	4b93      	ldr	r3, [pc, #588]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	e013      	b.n	80011ac <HAL_RCC_OscConfig+0x3c8>
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800119c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011a0:	fa93 f3a3 	rbit	r3, r3
 80011a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011a8:	4b88      	ldr	r3, [pc, #544]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	2202      	movs	r2, #2
 80011ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011b6:	fa92 f2a2 	rbit	r2, r2
 80011ba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011be:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011c2:	fab2 f282 	clz	r2, r2
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	f042 0220 	orr.w	r2, r2, #32
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	f002 021f 	and.w	r2, r2, #31
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00a      	beq.n	80011f4 <HAL_RCC_OscConfig+0x410>
 80011de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d002      	beq.n	80011f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f000 be2e 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f4:	4b75      	ldr	r3, [pc, #468]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	21f8      	movs	r1, #248	; 0xf8
 800120a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001212:	fa91 f1a1 	rbit	r1, r1
 8001216:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800121a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800121e:	fab1 f181 	clz	r1, r1
 8001222:	b2c9      	uxtb	r1, r1
 8001224:	408b      	lsls	r3, r1
 8001226:	4969      	ldr	r1, [pc, #420]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122c:	e0fd      	b.n	800142a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8088 	beq.w	8001350 <HAL_RCC_OscConfig+0x56c>
 8001240:	2301      	movs	r3, #1
 8001242:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001252:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001256:	fab3 f383 	clz	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001260:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	461a      	mov	r2, r3
 8001268:	2301      	movs	r3, #1
 800126a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fafa 	bl	8000864 <HAL_GetTick>
 8001270:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001276:	f7ff faf5 	bl	8000864 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d902      	bls.n	800128c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	f000 bde2 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800129e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	095b      	lsrs	r3, r3, #5
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d102      	bne.n	80012bc <HAL_RCC_OscConfig+0x4d8>
 80012b6:	4b45      	ldr	r3, [pc, #276]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	e013      	b.n	80012e4 <HAL_RCC_OscConfig+0x500>
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012e0:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	2202      	movs	r2, #2
 80012e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012ee:	fa92 f2a2 	rbit	r2, r2
 80012f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012fa:	fab2 f282 	clz	r2, r2
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	f042 0220 	orr.w	r2, r2, #32
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f002 021f 	and.w	r2, r2, #31
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f202 	lsl.w	r2, r1, r2
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0af      	beq.n	8001276 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	21f8      	movs	r1, #248	; 0xf8
 800132c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001330:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001334:	fa91 f1a1 	rbit	r1, r1
 8001338:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800133c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001340:	fab1 f181 	clz	r1, r1
 8001344:	b2c9      	uxtb	r1, r1
 8001346:	408b      	lsls	r3, r1
 8001348:	4920      	ldr	r1, [pc, #128]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
 800134e:	e06c      	b.n	800142a <HAL_RCC_OscConfig+0x646>
 8001350:	2301      	movs	r3, #1
 8001352:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001362:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001366:	fab3 f383 	clz	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001370:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	461a      	mov	r2, r3
 8001378:	2300      	movs	r3, #0
 800137a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fa72 	bl	8000864 <HAL_GetTick>
 8001380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fa6d 	bl	8000864 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d902      	bls.n	800139c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	f000 bd5a 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	fab3 f383 	clz	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	095b      	lsrs	r3, r3, #5
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d104      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5ec>
 80013c6:	4b01      	ldr	r3, [pc, #4]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	e015      	b.n	80013f8 <HAL_RCC_OscConfig+0x614>
 80013cc:	40021000 	.word	0x40021000
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013ec:	fa93 f3a3 	rbit	r3, r3
 80013f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013f4:	4bc8      	ldr	r3, [pc, #800]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	2202      	movs	r2, #2
 80013fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001402:	fa92 f2a2 	rbit	r2, r2
 8001406:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800140a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800140e:	fab2 f282 	clz	r2, r2
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	f042 0220 	orr.w	r2, r2, #32
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	f002 021f 	and.w	r2, r2, #31
 800141e:	2101      	movs	r1, #1
 8001420:	fa01 f202 	lsl.w	r2, r1, r2
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1ad      	bne.n	8001386 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8110 	beq.w	8001660 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001444:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d079      	beq.n	8001544 <HAL_RCC_OscConfig+0x760>
 8001450:	2301      	movs	r3, #1
 8001452:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4bab      	ldr	r3, [pc, #684]	; (800171c <HAL_RCC_OscConfig+0x938>)
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	461a      	mov	r2, r3
 8001476:	2301      	movs	r3, #1
 8001478:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff f9f3 	bl	8000864 <HAL_GetTick>
 800147e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff f9ee 	bl	8000864 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d902      	bls.n	800149a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	f000 bcdb 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014a4:	fa93 f3a3 	rbit	r3, r3
 80014a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014b4:	2202      	movs	r2, #2
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fa93 f2a3 	rbit	r2, r3
 80014c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014d8:	2202      	movs	r2, #2
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	fa93 f2a3 	rbit	r2, r3
 80014ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f4:	4b88      	ldr	r3, [pc, #544]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 80014f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001500:	2102      	movs	r1, #2
 8001502:	6019      	str	r1, [r3, #0]
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fa93 f1a3 	rbit	r1, r3
 8001512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001516:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800151a:	6019      	str	r1, [r3, #0]
  return result;
 800151c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001520:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	2101      	movs	r1, #1
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0a0      	beq.n	8001484 <HAL_RCC_OscConfig+0x6a0>
 8001542:	e08d      	b.n	8001660 <HAL_RCC_OscConfig+0x87c>
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001562:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001566:	601a      	str	r2, [r3, #0]
  return result;
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001570:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001572:	fab3 f383 	clz	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x938>)
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	461a      	mov	r2, r3
 8001582:	2300      	movs	r3, #0
 8001584:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff f96d 	bl	8000864 <HAL_GetTick>
 800158a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff f968 	bl	8000864 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d902      	bls.n	80015a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	f000 bc55 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 80015a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015d2:	2202      	movs	r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fa93 f2a3 	rbit	r2, r3
 80015e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015f6:	2202      	movs	r2, #2
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	fa93 f2a3 	rbit	r2, r3
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001610:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001612:	4b41      	ldr	r3, [pc, #260]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 8001614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800161e:	2102      	movs	r1, #2
 8001620:	6019      	str	r1, [r3, #0]
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	fa93 f1a3 	rbit	r1, r3
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001638:	6019      	str	r1, [r3, #0]
  return result;
 800163a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d197      	bne.n	8001590 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001664:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 81a1 	beq.w	80019b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d116      	bne.n	80016b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	4b23      	ldr	r3, [pc, #140]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	4a22      	ldr	r2, [pc, #136]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001692:	61d3      	str	r3, [r2, #28]
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800169c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_RCC_OscConfig+0x93c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d11a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_RCC_OscConfig+0x93c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a16      	ldr	r2, [pc, #88]	; (8001720 <HAL_RCC_OscConfig+0x93c>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ce:	f7ff f8c9 	bl	8000864 <HAL_GetTick>
 80016d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	e009      	b.n	80016ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d8:	f7ff f8c4 	bl	8000864 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b64      	cmp	r3, #100	; 0x64
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e3b1      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_RCC_OscConfig+0x93c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ef      	beq.n	80016d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10d      	bne.n	8001724 <HAL_RCC_OscConfig+0x940>
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a02      	ldr	r2, [pc, #8]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	e03c      	b.n	8001790 <HAL_RCC_OscConfig+0x9ac>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	10908120 	.word	0x10908120
 8001720:	40007000 	.word	0x40007000
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10c      	bne.n	800174e <HAL_RCC_OscConfig+0x96a>
 8001734:	4bc1      	ldr	r3, [pc, #772]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4ac0      	ldr	r2, [pc, #768]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6213      	str	r3, [r2, #32]
 8001740:	4bbe      	ldr	r3, [pc, #760]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4abd      	ldr	r2, [pc, #756]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001746:	f023 0304 	bic.w	r3, r3, #4
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	e020      	b.n	8001790 <HAL_RCC_OscConfig+0x9ac>
 800174e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b05      	cmp	r3, #5
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x994>
 800175e:	4bb7      	ldr	r3, [pc, #732]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4ab6      	ldr	r2, [pc, #728]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	4bb4      	ldr	r3, [pc, #720]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4ab3      	ldr	r2, [pc, #716]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	e00b      	b.n	8001790 <HAL_RCC_OscConfig+0x9ac>
 8001778:	4bb0      	ldr	r3, [pc, #704]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4aaf      	ldr	r2, [pc, #700]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6213      	str	r3, [r2, #32]
 8001784:	4bad      	ldr	r3, [pc, #692]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4aac      	ldr	r2, [pc, #688]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8081 	beq.w	80018a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff f85f 	bl	8000864 <HAL_GetTick>
 80017a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff f85a 	bl	8000864 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e345      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
 80017c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017cc:	2202      	movs	r2, #2
 80017ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	fa93 f2a3 	rbit	r2, r3
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017f0:	2202      	movs	r2, #2
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fa93 f2a3 	rbit	r2, r3
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800180a:	601a      	str	r2, [r3, #0]
  return result;
 800180c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001810:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001814:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	095b      	lsrs	r3, r3, #5
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d102      	bne.n	8001830 <HAL_RCC_OscConfig+0xa4c>
 800182a:	4b84      	ldr	r3, [pc, #528]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	e013      	b.n	8001858 <HAL_RCC_OscConfig+0xa74>
 8001830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001834:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001838:	2202      	movs	r2, #2
 800183a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001840:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	fa93 f2a3 	rbit	r2, r3
 800184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	4b79      	ldr	r3, [pc, #484]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800185c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001860:	2102      	movs	r1, #2
 8001862:	6011      	str	r1, [r2, #0]
 8001864:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001868:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	fa92 f1a2 	rbit	r1, r2
 8001872:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001876:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800187a:	6011      	str	r1, [r2, #0]
  return result;
 800187c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001880:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	fab2 f282 	clz	r2, r2
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	f002 021f 	and.w	r2, r2, #31
 8001896:	2101      	movs	r1, #1
 8001898:	fa01 f202 	lsl.w	r2, r1, r2
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d084      	beq.n	80017ac <HAL_RCC_OscConfig+0x9c8>
 80018a2:	e07f      	b.n	80019a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a4:	f7fe ffde 	bl	8000864 <HAL_GetTick>
 80018a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7fe ffd9 	bl	8000864 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e2c4      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018ce:	2202      	movs	r2, #2
 80018d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018f2:	2202      	movs	r2, #2
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fa93 f2a3 	rbit	r2, r3
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800190c:	601a      	str	r2, [r3, #0]
  return result;
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001916:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d102      	bne.n	8001932 <HAL_RCC_OscConfig+0xb4e>
 800192c:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	e013      	b.n	800195a <HAL_RCC_OscConfig+0xb76>
 8001932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001936:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800193a:	2202      	movs	r2, #2
 800193c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001942:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	fa93 f2a3 	rbit	r2, r3
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800195e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001962:	2102      	movs	r1, #2
 8001964:	6011      	str	r1, [r2, #0]
 8001966:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800196a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	fa92 f1a2 	rbit	r1, r2
 8001974:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001978:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800197c:	6011      	str	r1, [r2, #0]
  return result;
 800197e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001982:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	fab2 f282 	clz	r2, r2
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	f002 021f 	and.w	r2, r2, #31
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f202 	lsl.w	r2, r1, r2
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d184      	bne.n	80018ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 80019b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8242 	beq.w	8001e4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	f000 8213 	beq.w	8001dfe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	f040 8162 	bne.w	8001cae <HAL_RCC_OscConfig+0xeca>
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f2a3 	rbit	r2, r3
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a0e:	601a      	str	r2, [r3, #0]
  return result;
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7fe ff18 	bl	8000864 <HAL_GetTick>
 8001a34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a38:	e00c      	b.n	8001a54 <HAL_RCC_OscConfig+0xc70>
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7fe ff10 	bl	8000864 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e1fd      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a78:	601a      	str	r2, [r3, #0]
  return result;
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0xcba>
 8001a98:	4bb0      	ldr	r3, [pc, #704]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	e027      	b.n	8001aee <HAL_RCC_OscConfig+0xd0a>
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f2a3 	rbit	r2, r3
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	4b9c      	ldr	r3, [pc, #624]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001af6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001afa:	6011      	str	r1, [r2, #0]
 8001afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b00:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	fa92 f1a2 	rbit	r1, r2
 8001b0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b12:	6011      	str	r1, [r2, #0]
  return result;
 8001b14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b18:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	fab2 f282 	clz	r2, r2
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	f042 0220 	orr.w	r2, r2, #32
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f002 021f 	and.w	r2, r2, #31
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d182      	bne.n	8001a40 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3a:	4b88      	ldr	r3, [pc, #544]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	497f      	ldr	r1, [pc, #508]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b86:	601a      	str	r2, [r3, #0]
  return result;
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b90:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7fe fe5c 	bl	8000864 <HAL_GetTick>
 8001bac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb0:	e009      	b.n	8001bc6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7fe fe57 	bl	8000864 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e144      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bea:	601a      	str	r2, [r3, #0]
  return result;
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bf4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d102      	bne.n	8001c10 <HAL_RCC_OscConfig+0xe2c>
 8001c0a:	4b54      	ldr	r3, [pc, #336]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e027      	b.n	8001c60 <HAL_RCC_OscConfig+0xe7c>
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c64:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c6c:	6011      	str	r1, [r2, #0]
 8001c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c72:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	fa92 f1a2 	rbit	r1, r2
 8001c7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c84:	6011      	str	r1, [r2, #0]
  return result;
 8001c86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c8a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	fab2 f282 	clz	r2, r2
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f042 0220 	orr.w	r2, r2, #32
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f002 021f 	and.w	r2, r2, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d082      	beq.n	8001bb2 <HAL_RCC_OscConfig+0xdce>
 8001cac:	e0cf      	b.n	8001e4e <HAL_RCC_OscConfig+0x106a>
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	fa93 f2a3 	rbit	r2, r3
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cd2:	601a      	str	r2, [r3, #0]
  return result;
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7fe fdb6 	bl	8000864 <HAL_GetTick>
 8001cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	e009      	b.n	8001d12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe fdb1 	bl	8000864 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e09e      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fa93 f2a3 	rbit	r2, r3
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d36:	601a      	str	r2, [r3, #0]
  return result;
 8001d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	095b      	lsrs	r3, r3, #5
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d104      	bne.n	8001d60 <HAL_RCC_OscConfig+0xf7c>
 8001d56:	4b01      	ldr	r3, [pc, #4]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	e029      	b.n	8001db0 <HAL_RCC_OscConfig+0xfcc>
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	fa93 f2a3 	rbit	r2, r3
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d98:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_RCC_OscConfig+0x1078>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001db8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dbc:	6011      	str	r1, [r2, #0]
 8001dbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	fa92 f1a2 	rbit	r1, r2
 8001dcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dd4:	6011      	str	r1, [r2, #0]
  return result;
 8001dd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dda:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	fab2 f282 	clz	r2, r2
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f002 021f 	and.w	r2, r2, #31
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d180      	bne.n	8001cfe <HAL_RCC_OscConfig+0xf1a>
 8001dfc:	e027      	b.n	8001e4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e01e      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_OscConfig+0x1078>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d10b      	bne.n	8001e4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b09e      	sub	sp, #120	; 0x78
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e162      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b90      	ldr	r3, [pc, #576]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0207 	bic.w	r2, r3, #7
 8001e8e:	498b      	ldr	r1, [pc, #556]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e14a      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb4:	4b82      	ldr	r3, [pc, #520]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	497f      	ldr	r1, [pc, #508]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80dc 	beq.w	800208c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d13c      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xf6>
 8001edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d102      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xa6>
 8001f00:	4b6f      	ldr	r3, [pc, #444]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	e00f      	b.n	8001f26 <HAL_RCC_ClockConfig+0xc6>
 8001f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	667b      	str	r3, [r7, #100]	; 0x64
 8001f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f18:	663b      	str	r3, [r7, #96]	; 0x60
 8001f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f22:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f2e:	fa92 f2a2 	rbit	r2, r2
 8001f32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f002 021f 	and.w	r2, r2, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d17b      	bne.n	800204a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0f3      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d13c      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x178>
 8001f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d102      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x128>
 8001f82:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	e00f      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x148>
 8001f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	647b      	str	r3, [r7, #68]	; 0x44
 8001f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa4:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fac:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fb0:	fa92 f2a2 	rbit	r2, r2
 8001fb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb8:	fab2 f282 	clz	r2, r2
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	f042 0220 	orr.w	r2, r2, #32
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	f002 021f 	and.w	r2, r2, #31
 8001fc8:	2101      	movs	r1, #1
 8001fca:	fa01 f202 	lsl.w	r2, r1, r2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d13a      	bne.n	800204a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b2      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_ClockConfig+0x1a0>
 8001ffa:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e00d      	b.n	800201c <HAL_RCC_ClockConfig+0x1bc>
 8002000:	2302      	movs	r3, #2
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
 800200c:	2302      	movs	r3, #2
 800200e:	623b      	str	r3, [r7, #32]
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2202      	movs	r2, #2
 800201e:	61ba      	str	r2, [r7, #24]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	fa92 f2a2 	rbit	r2, r2
 8002026:	617a      	str	r2, [r7, #20]
  return result;
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	fab2 f282 	clz	r2, r2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f042 0220 	orr.w	r2, r2, #32
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f002 021f 	and.w	r2, r2, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e079      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	491a      	ldr	r1, [pc, #104]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7fe fc02 	bl	8000864 <HAL_GetTick>
 8002060:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7fe fbfe 	bl	8000864 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e061      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d214      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4906      	ldr	r1, [pc, #24]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e040      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
 80020bc:	40022000 	.word	0x40022000
 80020c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	491a      	ldr	r1, [pc, #104]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4912      	ldr	r1, [pc, #72]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002102:	f000 f829 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002106:	4601      	mov	r1, r0
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002110:	22f0      	movs	r2, #240	; 0xf0
 8002112:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	fa92 f2a2 	rbit	r2, r2
 800211a:	60fa      	str	r2, [r7, #12]
  return result;
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	40d3      	lsrs	r3, r2
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x2ec>)
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	fa21 f303 	lsr.w	r3, r1, r3
 800212e:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_RCC_ClockConfig+0x2f0>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_ClockConfig+0x2f4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fb50 	bl	80007dc <HAL_InitTick>
  
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3778      	adds	r7, #120	; 0x78
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	08002614 	.word	0x08002614
 8002150:	20000004 	.word	0x20000004
 8002154:	20000008 	.word	0x20000008

08002158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b08b      	sub	sp, #44	; 0x2c
 800215c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002172:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b04      	cmp	r3, #4
 8002180:	d002      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x30>
 8002182:	2b08      	cmp	r3, #8
 8002184:	d003      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x36>
 8002186:	e03c      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCC_GetSysClockFreq+0xc4>)
 800218a:	623b      	str	r3, [r7, #32]
      break;
 800218c:	e03c      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002194:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002198:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	fa92 f2a2 	rbit	r2, r2
 80021a0:	607a      	str	r2, [r7, #4]
  return result;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	40d3      	lsrs	r3, r2
 80021ac:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	220f      	movs	r2, #15
 80021bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	fa92 f2a2 	rbit	r2, r2
 80021c4:	60fa      	str	r2, [r7, #12]
  return result;
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	40d3      	lsrs	r3, r2
 80021d0:	4a14      	ldr	r2, [pc, #80]	; (8002224 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
 80021f0:	e004      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	623b      	str	r3, [r7, #32]
      break;
 8002200:	e002      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002204:	623b      	str	r3, [r7, #32]
      break;
 8002206:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002208:	6a3b      	ldr	r3, [r7, #32]
}
 800220a:	4618      	mov	r0, r3
 800220c:	372c      	adds	r7, #44	; 0x2c
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	007a1200 	.word	0x007a1200
 8002220:	08002624 	.word	0x08002624
 8002224:	08002634 	.word	0x08002634
 8002228:	003d0900 	.word	0x003d0900

0800222c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCC_GetHCLKFreq+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b092      	sub	sp, #72	; 0x48
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80d4 	beq.w	8002410 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002268:	4b4e      	ldr	r3, [pc, #312]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10e      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	4a4a      	ldr	r2, [pc, #296]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	61d3      	str	r3, [r2, #28]
 8002280:	4b48      	ldr	r3, [pc, #288]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228c:	2301      	movs	r3, #1
 800228e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b45      	ldr	r3, [pc, #276]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d118      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229e:	4b42      	ldr	r3, [pc, #264]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a41      	ldr	r2, [pc, #260]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7fe fadb 	bl	8000864 <HAL_GetTick>
 80022ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7fe fad7 	bl	8000864 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e169      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022d0:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 8084 	beq.w	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d07c      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f0:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	461a      	mov	r2, r3
 800231a:	2301      	movs	r3, #1
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002322:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800232c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	461a      	mov	r2, r3
 800233e:	2300      	movs	r3, #0
 8002340:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002342:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002346:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d04b      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe fa87 	bl	8000864 <HAL_GetTick>
 8002356:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe fa83 	bl	8000864 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e113      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002370:	2302      	movs	r3, #2
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
 800237c:	2302      	movs	r3, #2
 800237e:	623b      	str	r3, [r7, #32]
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	61fb      	str	r3, [r7, #28]
  return result;
 8002388:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d108      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800239e:	4b01      	ldr	r3, [pc, #4]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	e00d      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40007000 	.word	0x40007000
 80023ac:	10908100 	.word	0x10908100
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	4b78      	ldr	r3, [pc, #480]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	2202      	movs	r2, #2
 80023c2:	613a      	str	r2, [r7, #16]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	fa92 f2a2 	rbit	r2, r2
 80023ca:	60fa      	str	r2, [r7, #12]
  return result;
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	fab2 f282 	clz	r2, r2
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f002 021f 	and.w	r2, r2, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f202 	lsl.w	r2, r1, r2
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0b7      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023ea:	4b6d      	ldr	r3, [pc, #436]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	496a      	ldr	r1, [pc, #424]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002400:	2b01      	cmp	r3, #1
 8002402:	d105      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002404:	4b66      	ldr	r3, [pc, #408]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	4a65      	ldr	r2, [pc, #404]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800241c:	4b60      	ldr	r3, [pc, #384]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	f023 0203 	bic.w	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	495d      	ldr	r1, [pc, #372]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800242a:	4313      	orrs	r3, r2
 800242c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800243a:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4956      	ldr	r1, [pc, #344]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002458:	4b51      	ldr	r3, [pc, #324]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	494e      	ldr	r1, [pc, #312]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002466:	4313      	orrs	r3, r2
 8002468:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002476:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f023 0210 	bic.w	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4947      	ldr	r1, [pc, #284]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002494:	4b42      	ldr	r3, [pc, #264]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	493f      	ldr	r1, [pc, #252]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f023 0220 	bic.w	r2, r3, #32
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4938      	ldr	r1, [pc, #224]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d0:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	4930      	ldr	r1, [pc, #192]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ee:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	4929      	ldr	r1, [pc, #164]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	4921      	ldr	r1, [pc, #132]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	491a      	ldr	r1, [pc, #104]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002538:	4313      	orrs	r3, r2
 800253a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	4912      	ldr	r1, [pc, #72]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002556:	4313      	orrs	r3, r2
 8002558:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	490b      	ldr	r1, [pc, #44]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002574:	4313      	orrs	r3, r2
 8002576:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	4903      	ldr	r1, [pc, #12]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002592:	4313      	orrs	r3, r2
 8002594:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3748      	adds	r7, #72	; 0x48
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <__libc_init_array>:
 80025a4:	b570      	push	{r4, r5, r6, lr}
 80025a6:	4d0d      	ldr	r5, [pc, #52]	; (80025dc <__libc_init_array+0x38>)
 80025a8:	4c0d      	ldr	r4, [pc, #52]	; (80025e0 <__libc_init_array+0x3c>)
 80025aa:	1b64      	subs	r4, r4, r5
 80025ac:	10a4      	asrs	r4, r4, #2
 80025ae:	2600      	movs	r6, #0
 80025b0:	42a6      	cmp	r6, r4
 80025b2:	d109      	bne.n	80025c8 <__libc_init_array+0x24>
 80025b4:	4d0b      	ldr	r5, [pc, #44]	; (80025e4 <__libc_init_array+0x40>)
 80025b6:	4c0c      	ldr	r4, [pc, #48]	; (80025e8 <__libc_init_array+0x44>)
 80025b8:	f000 f820 	bl	80025fc <_init>
 80025bc:	1b64      	subs	r4, r4, r5
 80025be:	10a4      	asrs	r4, r4, #2
 80025c0:	2600      	movs	r6, #0
 80025c2:	42a6      	cmp	r6, r4
 80025c4:	d105      	bne.n	80025d2 <__libc_init_array+0x2e>
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
 80025c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025cc:	4798      	blx	r3
 80025ce:	3601      	adds	r6, #1
 80025d0:	e7ee      	b.n	80025b0 <__libc_init_array+0xc>
 80025d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025d6:	4798      	blx	r3
 80025d8:	3601      	adds	r6, #1
 80025da:	e7f2      	b.n	80025c2 <__libc_init_array+0x1e>
 80025dc:	08002644 	.word	0x08002644
 80025e0:	08002644 	.word	0x08002644
 80025e4:	08002644 	.word	0x08002644
 80025e8:	08002648 	.word	0x08002648

080025ec <memset>:
 80025ec:	4402      	add	r2, r0
 80025ee:	4603      	mov	r3, r0
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d100      	bne.n	80025f6 <memset+0xa>
 80025f4:	4770      	bx	lr
 80025f6:	f803 1b01 	strb.w	r1, [r3], #1
 80025fa:	e7f9      	b.n	80025f0 <memset+0x4>

080025fc <_init>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	bf00      	nop
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr

08002608 <_fini>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	bf00      	nop
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr
